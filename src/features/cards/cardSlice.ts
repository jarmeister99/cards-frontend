import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';
import { fetchCards } from './cardAPI';

export interface CardState {
  cards: any[]
}

const initialState: CardState = {
  cards: []
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(fetchCardsAsync())`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchCardsAsync = createAsyncThunk( // createAsyncThunk returns a standard Redux 'thunk action creator'
  'cards/fetchCardsAsync',  // accepts Redux action type string
  async () => { // async functions ALWAYS return a promise
    const response = await fetchCards().catch(error => {
      throw error;
    });
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const cardSlice = createSlice({
  name: 'cards',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    remove: (state, action: PayloadAction<String>) => {
      state.cards = state.cards.filter(card => (card._id.$oid !== action.payload))
    },
    filter: (state, action: PayloadAction<String[]>) => {
      // for each card, if the card has a single tag that is within the selectedTags, return true
      if (action.payload.length > 0){
        state.cards = state.cards.filter(card => ( 
          card.tags?.some((tag: String) => action.payload.includes(tag))
        ))
      }
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchCardsAsync.fulfilled, (state, action) => {
        state.cards = action.payload;
      });
  },
});

export const { remove, filter } = cardSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.cards.cards)`
export const selectCards = (state: RootState) => state.cards.cards;

export default cardSlice.reducer;
